import { useState, useCallback } from 'react';

/**
 * Custom hook for clipboard operations
 * Provides copy functionality with success/error feedback
 * 
 * @param {number} resetDelay - Time in ms to reset success state (default: 2000)
 * @returns {object} - Clipboard utilities
 */
export const useClipboard = (resetDelay = 2000) => {
  const [isCopied, setIsCopied] = useState(false);
  const [isError, setIsError] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  // Copy text to clipboard
  const copyToClipboard = useCallback(async (text) => {
    try {
      // Reset states
      setIsError(false);
      setErrorMessage('');

      // Check if clipboard API is available
      if (navigator.clipboard && window.isSecureContext) {
        // Use modern clipboard API
        await navigator.clipboard.writeText(text);
      } else {
        // Fallback for older browsers or non-secure contexts
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        
        if (!successful) {
          throw new Error('Copy command failed');
        }
      }

      setIsCopied(true);
      
      // Reset success state after delay
      setTimeout(() => {
        setIsCopied(false);
      }, resetDelay);

    } catch (error) {
      console.error('Failed to copy text: ', error);
      setIsError(true);
      setErrorMessage(error.message || 'Failed to copy to clipboard');
      
      // Reset error state after delay
      setTimeout(() => {
        setIsError(false);
        setErrorMessage('');
      }, resetDelay);
    }
  }, [resetDelay]);

  // Copy with custom success message
  const copyWithFeedback = useCallback(async (text, successMessage = 'Copied!') => {
    await copyToClipboard(text);
    // Could be extended to show custom success messages
  }, [copyToClipboard]);

  // Reset all states manually
  const reset = useCallback(() => {
    setIsCopied(false);
    setIsError(false);
    setErrorMessage('');
  }, []);

  return {
    copyToClipboard,
    copyWithFeedback,
    isCopied,
    isError,
    errorMessage,
    reset
  };
};

/**
 * Specialized clipboard hook for cipher app
 * Includes formatting and metadata for copied cipher text
 */
export const useCipherClipboard = () => {
  const { copyToClipboard, isCopied, isError, errorMessage } = useClipboard();

  // Copy encrypted text only (no metadata by default)
  const copyEncrypted = useCallback(async (encryptedText, shift, includeMetadata = false) => {
    let textToCopy = encryptedText;
    
    // Only add metadata if explicitly requested
    if (includeMetadata && shift !== undefined) {
      textToCopy = `${encryptedText}\n\n--- CipherBox ---\nShift: ${shift}\nGenerated: ${new Date().toLocaleString()}\nNote: This is an educational Caesar cipher.`;
    }
    
    await copyToClipboard(textToCopy);
  }, [copyToClipboard]);

  // Copy decrypted text
  const copyDecrypted = useCallback(async (decryptedText) => {
    await copyToClipboard(decryptedText);
  }, [copyToClipboard]);

  // Copy alphabet mapping
  const copyAlphabetMapping = useCallback(async (mapping) => {
    const mappingText = Object.entries(mapping)
      .filter(([key]) => /[A-Z]/.test(key)) // Only uppercase for readability
      .map(([original, encrypted]) => `${original} â†’ ${encrypted}`)
      .join('  ');
    
    const formattedText = `Caesar Cipher Alphabet Mapping:\n${mappingText}\n\nGenerated by CipherBox - Educational Tool`;
    await copyToClipboard(formattedText);
  }, [copyToClipboard]);

  // Copy analysis data
  const copyAnalysis = useCallback(async (analysis, text) => {
    const analysisText = `Text Analysis:
Original Text: "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"
Total Characters: ${analysis.totalChars}
Letters: ${analysis.letters}
Words: ${analysis.words}
Spaces: ${analysis.spaces}
Numbers: ${analysis.numbers}
Punctuation: ${analysis.punctuation}

Generated by CipherBox - Educational Caesar Cipher Tool`;
    
    await copyToClipboard(analysisText);
  }, [copyToClipboard]);

  return {
    copyEncrypted,
    copyDecrypted,
    copyAlphabetMapping,
    copyAnalysis,
    isCopied,
    isError,
    errorMessage
  };
};